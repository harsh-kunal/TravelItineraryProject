@page "/flights/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable


<h3 class="card-title">Flights</h3>
<br />

<a href="/flights/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Flight
</a>
<br />
<br />

@if (Flights == null)
{
    <div class="alert alert-info">Loading Flights...</div>
}
else
{
    <table class="table table-responsive" id="flightsTable">
        <thead>
            <tr>
                <th>Customer Name</th>
                <th>Airlines</th>
                <th>Origin</th>
                <th>Destination</th>
                <th>Journey Start Date</th>
                <th>Journey End Date</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var flight in Flights)
            {
                <tr>
                    <td>@flight.Trip.Customer.Name </td>
                    <td>@flight.Airlines</td>
                    <td>@flight.DestinationFrom</td>
                    <td>@flight.Trip.Destination</td>
                    <td>@flight.StartDate.ToString("dd MMMM yyyy")</td>
                    <td>@(flight.EndDate != null ? flight.EndDate.Value.ToString("dd MMMM yyyy") : " To be Determined")</td>
                    <td>@flight.FlighFees</td>
                    <td>
                        <a href="/flights/view/@flight.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/flights/edit/@flight.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(flight.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Flight> Flights;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Flights = await _client.GetFromJsonAsync<List<Flight>>($"{Endpoints.FlightsEndpoint}");
    }

    async Task Delete(int flightId)
    {
        var flight = Flights.First(q => q.Id == flightId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {flight.Airlines}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.FlightsEndpoint}/{flightId}");
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#flightsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#flightsTable");
    }
}

