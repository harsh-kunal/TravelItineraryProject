@inject HttpClient _client

<EditForm Model="@payment" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Customer: </label>
            <div>
                <InputSelect @bind-Value="payment.CustomerId" class="form-control">
                    <option value=""> --Select Customer-- </option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => payment.CustomerId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Transaction Amount: </label>
            <div>
                <InputNumber @bind-Value="@payment.PaymentAmount" class="form-control" />
                <ValidationMessage For="@(() => payment.PaymentAmount)" />
            </div>
        </div>

        <div class="form-group">
            <label>Transaction Type: </label>
            <div>
                <InputText @bind-Value="@payment.PaymentType" class="form-control" />
                <ValidationMessage For="@(() => payment.PaymentType)" />
            </div>
        </div>

        <div class="form-group">
            <label>Transaction Date: </label>
            <div>
                <InputDate @bind-Value="@payment.PaymentDate" class="form-control" />
                <ValidationMessage For="@(() => payment.PaymentDate)" />
            </div>
        </div>

        <div class="form-group">
            <label>Transaction Description: </label>
            <div>
                <InputText @bind-Value="@payment.PaymentDescription" class="form-control" />
                <ValidationMessage For="@(() => payment.PaymentDescription)" />
            </div>
        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>

    }
    <BackToList Target="payments" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Payment payment { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Customer> Customers;
    private IList<Trip> Trips;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Trips = await _client.GetFromJsonAsync<List<Trip>>($"{Endpoints.TripsEndpoint}");
    }

}