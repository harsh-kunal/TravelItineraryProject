@page "/events/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Events</h3>
<br />

<a href="/events/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Event
</a>
<br />
<br />

@if (Events == null)
{
    <div class="alert alert-info">Loading Events...</div>
}
else
{
    <table class="table table-responsive" id="eventsTable">
        <thead>
            <tr>
                <th>Customer Name</th>
                <th>Destination</th>
                <th>Event Start Date</th>
                <th>Event End Date</th>
                <th>Event Location</th>
                <th>Event Title</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eve in Events)
            {
                <tr>
                    <td>@eve.Schedule.Trip.Customer.Name</td>
                    <td>@eve.Schedule.Trip.Destination</td>
                    <td>@eve.StartDate.Date.ToString("dd MMMM yyyy")</td>
                    <td>@(eve.EndDate != null ? eve.EndDate.Value.ToString("dd MMMM yyyy") : "Determined" )</td>
                    <td>@eve.EventLocation</td>
                    <td>@eve.EventTitle</td>
                    <td>
                        <a href="/events/view/@eve.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/events/edit/@eve.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(eve.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Event> Events;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Events = await _client.GetFromJsonAsync<List<Event>>($"{Endpoints.EventsEndpoint}");
    }

    async Task Delete(int eventId)
    {
        var eve = Events.First(q => q.Id == eventId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {eve.StartDate}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.EventsEndpoint}/{eventId}");
            await OnInitializedAsync();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#eventsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#eventsTable");
    }
}

